---
# vim: sw=2 ts=102 ai
###
# You must set a months_ago variable!
# Normally you do this via an include:
# include: satellite_helper_filter.yml months_ago=4 environments=Development,Testing
###

- name: "Filter {{ months_ago }} months ago: set the cvv_date"
  set_fact:
    cvv_date: "{{ lookup('pipe', 'date -d \"'+months_ago|string+' months ago\" +%Y-%m-01') }}"
    cvv_description: "Since {{ lookup('pipe', 'date -d \"'+months_ago|string+' months ago\" +%Y-%m-01') }}"
    cvv_environments: "{{ environments.split(',') }}"

###
# This is the creation portion of the errata
###
- name: "Filter {{ months_ago }} months ago: get all filters"
  command: "/usr/bin/hammer --output json content-view filter list --content-view='{{ CV }}' {{ORG}}"
  changed_when: false
  register: hammer_output

- name: "Filter {{ months_ago }} months ago: remove all filters"
  command: "/usr/bin/hammer --output json content-view filter delete --id={{item['Filter ID']}}"
  with_items: "{{ hammer_output.stdout | default('[]') | from_json }}"

- name: "create filters"
  command: "/usr/bin/hammer content-view filter create --content-view='{{ CV }}' {{ORG}} --name '{{item.name}}' --type '{{item.type}}' --description '{{item.name}}' --inclusion '{{item.includes}}'"
  with_items: "{{ filter_rules }}"

- name: "Filter {{ months_ago }} months ago: create filter rules by date"
  command: "/usr/bin/hammer content-view filter rule create --content-view='{{ CV }}' {{ORG}} --content-view-filter '{{item.name}}' --start-date='{{item.date}}' --types enhancement,bugfix,security"
  when: not item.package
  with_items: "{{ filter_rules }}"

- name: "Filter {{ months_ago }} months ago: create filter rules by package"
  command: "/usr/bin/hammer content-view filter rule create --content-view='{{ CV }}' {{ORG}} --content-view-filter '{{item.name}}' --name '{{item.package}}'"
  when: item.package
  with_items: "{{ filter_rules }}"

- name: "Filter {{ months_ago }} months ago: publish new rule"
  command: "/usr/bin/hammer content-view publish --name='{{ CV }}' --description '{{cvv_description}}' {{ORG}}"

- name: "Filter {{ months_ago }} months ago: Grab all versions"
  command: "/usr/bin/hammer --output json content-view version list --content-view='{{ CV }}' {{ORG}}"
  changed_when: false
  register: hammer_output

- name: "Filter {{ months_ago }} months ago: Calculate latest version"
  set_fact:
    tmp: "{{ hammer_output.stdout | from_json | sort(attribute='Version', reverse=true) | first }}"

- name: "Filter {{ months_ago }} months ago: Store version and environments"
  set_fact:
    cvv_latest: "{{ tmp['Version'] }}"
    cvv_env:    "{{ tmp['Lifecycle Environments'] }}"

- name: "Filter {{ months_ago }} months ago: Promoting to lifecycles {{ environments }}"
  command: "/usr/bin/hammer --output json content-view version promote --content-view='{{ CV }}' {{ORG}} --version={{ cvv_latest }} --to-lifecycle-environment={{ item }}"
  register: hammer_output
  when: "item not in cvv_env and item"
  with_items: "{{ cvv_environments }}"
